name: V2LY not master

on: [push]

# Still not comfortable that github actions events are granular to do what we want, 
# so using an if statement below instead

jobs:
  setup:    
    name: Set up NPM, use cache, NPM CI
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master' #If we're not being pushed to master, do all the test steps
    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules #Caches everything for the other tasks to run
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node 12
      uses: actions/setup-node@v1
      with:
        node-version: 12.16.1
        mongoms_download_mirror: http://downloads.mongodb.org
        mongoms_version: 4.0.5
        mongoms_disable_postinstall: 1
        ci_node_index: 0
        ci_node_total: 1

    - name: Set up dependencies  #Warm cache
      run: npm ci

  lang:
    name: Lang #Do our language file weirdness and make sure we're all good going to build
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Lang
      run: |
        npm ci
        cp lang/en.json lang/en.orig.json
        npm run build:lang
        diff lang/en.json lang/en.orig.json

  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: lint
      run: |
        npm ci
        npx standard

  testroot:
    name: Test Root #Test only the high level tests 
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Test Root __tests__    
      run: |
        npm ci
        npm run test:root

  testserver:
    name: Test Server #Test server side, includes security
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Test Server (and security)
      run: |
        npm ci
        npm run test:server

  testcomponents:
    name: Test Components #Test components
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Test Server (and security)
      run: |
        npm ci
        npm run test:components

  testlibraries:
    name: Test Libraries #Test libs
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Test Server (and security)
      run: |
        npm ci
        npm run test:lib

  build-and-deploy:
    name: Build to ECR, deploy to ECS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' #If we are pushing to master, assume (because permissions) all the tests were run on PRs, just do a deploy step
    steps:

    - name: Check out
      uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-  

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Log in to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Builds aplha image, uses same image to tag and push beta
    - name: Alpha build, tag, and push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: vly-alpha
        IMAGE_TAG: ${{ github.sha }}
        ENV_ENVIRONMENT: alpha
        ENV_SECRET: ${{ secrets.ENV_SECRET_ALPHA }}
      run: |
        docker build --target production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
        --build-arg ENV_ENVIRONMENT=$ENV_ENVIRONMENT --build-arg ENV_SECRET=$ENV_SECRET \
        --build-arg REVISION=$IMAGE_TAG \
        .
        docker image tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:master
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:master

        docker image tag $ECR_REGISTRY/$ECR_REPOSITORY:master $ECR_REGISTRY/vly-beta:master
        docker push $ECR_REGISTRY/vly-beta:master

    - name: Log out of ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

    - name: Deploy Alpha to ECS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: vly-alpha  
      run: |
        aws ecs update-service --service vly-alpha --cluster vly-alpha-ECSCluster --force-new-deployment --desired-count 3 --deployment-configuration maximumPercent=100,minimumHealthyPercent=50

    - name: Deploy Beta to ECS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: vly-beta  
      run: |
        aws ecs update-service --service voluntarily-beta-service --cluster vly-beta --force-new-deployment --desired-count 3 --deployment-configuration maximumPercent=100,minimumHealthyPercent=50
  

  build-and-deploy-beta:
    name: Build to ECR, deploy to ECS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/beta' #If we are pushing to beta, assume (because permissions) all the tests were run on PRs, just do a deploy step
    steps:

    - name: Check out
      uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-  

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Log in to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Builds aplha image, uses same image to tag and push beta
    - name: Beta build, tag, and push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: vly-beta
        IMAGE_TAG: ${{ github.sha }}
        ENV_ENVIRONMENT: beta
        ENV_SECRET: ${{ secrets.ENV_SECRET_BETA }}
      run: |
        docker build --target production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
        --build-arg ENV_ENVIRONMENT=$ENV_ENVIRONMENT --build-arg ENV_SECRET=$ENV_SECRET \
        --build-arg REVISION=$IMAGE_TAG \
        .
        docker image tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:master
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:master

    - name: Log out of ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

    - name: Deploy Beta to ECS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: vly-beta  
      run: |
        aws ecs update-service --service vly-beta --cluster vly-beta --force-new-deployment --desired-count 3 --deployment-configuration maximumPercent=100,minimumHealthyPercent=50


  build-and-deploy-gamma:
    name: Build to ECR, deploy to ECS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/gamma' #If we are pushing to gamma, assume (because permissions) all the tests were run on PRs, just do a deploy step
    steps:

    - name: Check out
      uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-  

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Log in to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Builds aplha image, uses same image to tag and push gamma
    - name: Gamma build, tag, and push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: vly-gamma
        IMAGE_TAG: ${{ github.sha }}
        ENV_ENVIRONMENT: gamma
        ENV_SECRET: ${{ secrets.ENV_SECRET_GAMMA }}
      run: |
        docker build --target production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
        --build-arg ENV_ENVIRONMENT=$ENV_ENVIRONMENT --build-arg ENV_SECRET=$ENV_SECRET \
        --build-arg REVISION=$IMAGE_TAG \
        .
        docker image tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:master
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:master

    - name: Log out of ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

    - name: Deploy Gamma to ECS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: vly-gamma  
      run: |
        aws ecs update-service --service vly-gamma --cluster vly-gamma-ECSCluster --force-new-deployment --desired-count 3 --deployment-configuration maximumPercent=100,minimumHealthyPercent=50

  build-and-deploy-live:
    name: Build to ECR, deploy to ECS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/live' #If we are pushing to live, assume (because permissions) all the tests were run on PRs, just do a deploy step
    steps:

    - name: Check out
      uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-  

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Log in to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Builds aplha image, uses same image to tag and push beta
    - name: Live build, tag, and push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: vly-live
        IMAGE_TAG: ${{ github.sha }}
        ENV_ENVIRONMENT: live
        ENV_SECRET: ${{ secrets.ENV_SECRET_LIVE }}
      run: |
        docker build --target production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
        --build-arg ENV_ENVIRONMENT=$ENV_ENVIRONMENT --build-arg ENV_SECRET=$ENV_SECRET \
        --build-arg REVISION=$IMAGE_TAG \
        .
        docker image tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:master
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:master

    - name: Log out of ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

    - name: Deploy Live to ECS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: vly-live  
      run: |
        aws ecs update-service --service vly-live --cluster vly-live-ECSCluster --force-new-deployment --desired-count 3 --deployment-configuration maximumPercent=100,minimumHealthyPercent=50
